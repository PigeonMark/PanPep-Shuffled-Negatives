import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns
from sklearn.metrics import roc_auc_score, accuracy_score, roc_curve, auc


def auc_cv():
    """
    Print the 5-fold cross-validation ROC-AUC results of PanPep and ImRex tested on data generated by shuffling without
    removing duplicates also present in the PanPep training data.
    """

    panpep_aucs = []
    imrex_aucs = []

    for cv in range(5):
        panpep_pred_df = pd.read_csv(f"Output/cross-validation_shuffled-negatives_splits/panpep_predictions_{cv}.csv")
        imrex_pred_df = pd.read_csv(f"Output/cross-validation_shuffled-negatives_splits/imrex_predictions_{cv}.csv")
        true_df = pd.read_csv(f"Data/cross-validation_shuffled-negatives_splits/test_fold_{cv}.csv")
        panpep_aucs.append(roc_auc_score(true_df["y"], panpep_pred_df["Score"]))
        imrex_aucs.append(roc_auc_score(true_df["y"], imrex_pred_df["y_pred"]))
    print(f"PanPep 5-fold cv: test AUC: {np.mean(panpep_aucs):.6f} +- {np.std(panpep_aucs):.6f}")
    print(f"ImRex  5-fold cv: test AUC: {np.mean(imrex_aucs):.6f} +- {np.std(imrex_aucs):.6f}")


def panpep_zeroshot():
    """
    Print the ROC-AUC and accuracy of PanPep on its own zero-shot test data with negatives generated by shuffling
    """

    pred_df = pd.read_csv(f"Output/zeroshot_shuffled-negatives_out.csv")
    true_df = pd.read_csv(f"Data/zeroshot_shuffled-negatives.csv")
    pos_true = true_df['label'] == 1
    neg_true = ~pos_true

    print(f"PanPep on data with negatives generated by ImRex\n"
          f"Test AUC: {roc_auc_score(true_df['label'], pred_df['Score']):.6f}\n"
          f"Test ACC: {accuracy_score(true_df['label'], pred_df['Score'] > .5):.6f}\n"
          f"ACC true positive samples: {accuracy_score(true_df['label'][pos_true], pred_df['Score'][pos_true] > .5):.6f}\n"
          f"ACC true negative samples: {accuracy_score(true_df['label'][neg_true], pred_df['Score'][neg_true] > .5):.6f}")


def plot_panpep_zeroshot():
    """
    Save the ROC curve of the PanPep predictions made on its own zero-shot test data with negatives generated by
    shuffling.
    """

    plt.figure(figsize=(6.4 / 1.5, 4.8 / 1.5))

    pred_df = pd.read_csv(f"Output/zeroshot_shuffled-negatives_out.csv")
    true_df = pd.read_csv(f"Data/zeroshot_shuffled-negatives.csv")
    fpr, tpr, _ = roc_curve(true_df['label'], pred_df['Score'])
    auc_score = auc(fpr, tpr)
    data = pd.DataFrame({'False Positive Rate': fpr, 'True Positive Rate': tpr})
    sns.lineplot(data={'False Positive Rate': [0, 1], 'True Positive Rate': [0, 1]}, x='False Positive Rate',
                 y='True Positive Rate', linestyle='dashed', color='#999999ff', linewidth=2)
    sns.lineplot(data=data, x='False Positive Rate', y='True Positive Rate',
                 label=f"AUC = {round(auc_score * 100, 1):.1f}%", color="#8ab6e0ff", linewidth=2.5)
    plt.legend(loc='lower right', frameon=False)
    plt.ylim((0, None))
    plt.xlim((0, None))
    sns.despine()
    plt.tight_layout()
    plt.savefig("Output/panpep_zeroshot.jpg", dpi=300)


def plot_auc_cv(file_template, pred_col, color):
    """
    Plot the mean and standard deviation ROC-curve of cross-validated predictions
    Args:
        file_template:  Template for the file in which the CV predictions are stored, the file that will be read is of
                        the form: {file_template}_{CV}.csv
        pred_col:       The column name of the predictions in the csv file
        color:          The color of the ROC-curve
    """

    tprs = []
    aucs = []
    mean_fpr = np.linspace(0, 1, 100)
    for cv in range(5):
        pred_df = pd.read_csv(f"{file_template}_{cv}.csv")
        true_df = pd.read_csv(f"Data/cross-validation_shuffled-negatives_splits/test_fold_{cv}.csv")

        fpr, tpr, _ = roc_curve(true_df["y"], pred_df[pred_col])
        interp_tpr = np.interp(mean_fpr, fpr, tpr)
        interp_tpr[0] = 0.0
        tprs.append(interp_tpr)
        aucs.append(auc(fpr, tpr))

    mean_tpr = np.mean(tprs, axis=0)
    mean_tpr[-1] = 1.0
    mean_auc = auc(mean_fpr, mean_tpr)
    std_auc = np.std(aucs)
    std_tpr = np.std(tprs, axis=0)

    data = pd.DataFrame({'False Positive Rate': mean_fpr, 'True Positive Rate': mean_tpr})
    ax = sns.lineplot(data=data, x='False Positive Rate', y='True Positive Rate',
                      label=f"AUC = {round(mean_auc * 100, 1):.1f}% Â± {round(std_auc * 100, 1):.1f}%",
                      color=color, linewidth=2.5)
    ax.fill_between(mean_fpr, mean_tpr - std_tpr, mean_tpr + std_tpr, alpha=0.5, color=color)


def plot_cv_aucs():
    """
    Save the ROC curve of the PanPep predictions made on data generated by shuffling without removing duplicates also
    present in the PanPep training data.
    """

    plt.figure(figsize=(6.4 / 1.5, 4.8 / 1.5))

    sns.lineplot(data={'False Positive Rate': [0, 1], 'True Positive Rate': [0, 1]}, x='False Positive Rate',
                 y='True Positive Rate', linestyle='dashed', color='#999999ff', linewidth=2)

    plot_auc_cv("Output/cross-validation_shuffled-negatives_splits/panpep_predictions", "Score", "#8ab6e0ff")

    plt.legend(loc='lower right', frameon=False)
    plt.ylim((0, None))
    plt.xlim((0, None))

    sns.despine()
    plt.tight_layout()
    plt.savefig("Output/panpep_shuffle_cv.jpg", dpi=300)


if __name__ == "__main__":
    auc_cv()
    print()
    panpep_zeroshot()

    sns.set_style("white")
    plt.rcParams["font.family"] = "Ubuntu"

    plot_panpep_zeroshot()
    plot_cv_aucs()
